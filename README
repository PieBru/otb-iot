#
# OTB-IOT - Out of The Box Internet Of Things
#
# Copyright (C) 2016 Piers Finlayson
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#

### Introduction

OTB-IOT is a firmware for IOT applications intended to run "Out of The Box".  This means that after flashing the firmware onto an IOT device the firwmare is immediately usefully usable by human being, without flash, serial or other engineering type access.


### Getting started

- Make sure you export SDK_BASE e.g.:
  export SDK_BASE=/opt/esp-open/sdk
- make
- make flash (to flash your board)
- make connect (to connect to serial)


### Serial

I've chosen 74880 as baud rate, because this is used by the chip and bootloader
so by using the same for the application code means you get all of the output
without having to switch.


### Customization

Fiddle with definitions in src/otb_def.h.  Particularly
- OTB_MQTT_SERVER (set to your own MQTT server, I've tested with mosquitto)
- OTB_MQTT_LOCATION_1, OTB_MQTT_LOCATION_2, OTB_MQTT_LOCATION3, and OTB_MQTT_LOCATION_4_OPT


### Project status

Starting to solidify:
- Solid wifi support.
- DS18B20 temperature reporting over MQTT stable.
- Logging extensive.
- Decent Makefile.
- Don't yet have first time wifi setup working.
- Experimental OTA update support

Note I moved away from using Arduino for Wifi, as this was flaky.  Now using
SDK directly.


### First time setup

For first time usage it can be configured via wifi using the built in web server and its own wifi access point, and will then store off its wifi credentials for future use - except I've regressed this area of function removing WiFiManager, so there's some code in otb_main that can be #if 1'd in to set SSID and password.  It should request new wifi credentials if unable to connect to this configured wifi, and then only for a pre-configured amount of time before it reboots to try and connect to the configured wifi.

Alternatively, first flash your device with the AT firmware as follows
(replace paths as appropriate and 32m with size in bits of your flash).

esptool.py write_flash -fs 32m 0x0 /opt/esp-open-sdk/esp_iot_sdk_v1.4.0/bin/at/noboot/eagle.flash.bin 0x3e000 /opt/esp-open-sdk/esp_iot_sdk_v1.4.0/bin/blank.bin 0x40000 /opt/esp-open-sdk/esp_iot_sdk_v1.4.0/bin/at/noboot/eagle.irom0text.bin 0x7c000 /opt/esp-open-sdk/esp_iot_sdk_v1.4.0/bin/esp_init_data_default.bin 0x7e000 /opt/esp-open-sdk/esp_iot_sdk_v1.4.0/bin/blank.bin

Then run:

AT+CWMODE=1
AT+CWJAP="your_ssid","your_password"

Then flash OTB-IOT onto your device.


### Supported IOT hardware

Right now OTB-IOT has been devloped to support ESP8266 based boards, and has been tested on ESP-01(1M), ESP-12(E) and Wemos D1-mini boards.  To build other than ESP-01(1M) requires tweaking the platform.ini and ./build scripts.  Other IOT platforms may be supported in future.


### Supported sensors

Today the supported sensor types are:
- DS18B20 temperature sensors (up to a eight devices, up to 2 tested)

Future supported sensors are likely to include:
- DHT22 temperature and humidity sensors
- Current transformer sensors
- NEO-6X GPS


### Other supported hardware

Future support may also include:
- Screens (to display status on a locally attached screen)
- Relays (to control AC equipment)
- Physical ethernet port (to act as wifi to ethernet bridge)


### Communication protocols

Supported communication protocols are:
- 802.11 b/g/n for physical network access
- IPv4 transport
- Serial for debug messages
- MQTT for
  - communication about attached sensor values
  - remote control (reconfiuration, reset, relay control)


### MQTT topic structure

(See src/otb_def.h for values of the defines in caps below.)

Supports multiple structures for reporting:
- /OTB_ROOT/LOCATION_1/LOCATION_2/LOCATION_3/CHIP_ID/TEMPERATURE
- /OTB_ROOT/LOCATION_1/LOCATION_2/LOCATION_3/CHIP_IP/LOCATION_4_OPT/TEMPERATURE
- Same paths but replace TEMPERATURE with SYSTEM_CMD:
  - BOOTED_STATUS (once OTB-IOT booted and includes version string and compile date and time)
- /LWT/OTB_ROOT/LOCATION_1/LOCATION_2/LOCATION_3/OTB_CHIPID/PUB_STATUS offline (MQTT last will and testament, if device becomes disconnected)

For controlling the same variants, but replace TEMPERATURE with SYSTEM_CMD.  Supported commands:
- RESET_CMD (resets device)
- REBOOT_CMD (reboots device)
- UPGRADE_CMD (upgrades device - not supported yet)

Logs are published to /OTB_ROOT/LOCATION_1/LOCATION_2/LOCATION_3/CHIP_ID/PUB_LOG.

Also subscribes to /OTB_ROOT/ALL/SYSTEM_CMD for control of multiple devices at once.


### Upgrades

OTA ugprades now supported using rboot to provide multiple ROM slots.  This
capability can be drive by MQTT using topic /otb_iot/*/system message
update:image like this:

mosquitto_pub -p 1880 -t /otb_iot/all/system -m update:image

Note that right now the upgrade HTTP server, port number and image name is
hard coded.  This will be specified via MQTT shortly.

The makefile only supports 32Mb (4MB) flash by default.  This can be changed,
by changing the Makefile from:

esptool.py write_flash -fs 32m 0x0 bin/rboot.bin

to the following, for example for 8Mb (1MB):

esptool.py write_flash -fs 8m 0x0 bin/rboot.bin

32Mb/4MB has the benefit that both ROMs will live in the same memory location
once the 1MB window from the flash has been loaded.  Therefore when both ROM
slots are in the same 1MB window, a different eagle.app.v6.ld is required
for the second ROM, changing this line:

irom0_0_seg :                         org = 0x40202010, len = 0x3C000

This is a fairly complicated area.  For more guidance, see https://github.com/raburton/rboot

The minimum supported size is likely to be 8Mb (1MB), as the .bin image is
currently very nearly 250KB.

I've found some web servers incompatible with the rather flaky OTA code (needs
some reworking).  Right now I'm use nweb, as nice simple small web server.  To
use this you'll need to add bin as a supported file type.

nweb: https://www.ibm.com/developerworks/systems/library/es-nweb/

To add bin files add this to extensions:

        {"bin","application/octet-stream" },


### Errors

All errors are logged to serial.  ERROR logs are also logged via MQTT, but only if connected (if not they are only output to serial).

OTB-IOT attempts to recover from serious errors by resetting.  However, ESP8266 software reset appears to be quite flakey on some devices (perhaps due to floating pins on many ESP boards). 

Best solution I've found so far to make reset reliable is to tie GPIO 16 to
the reset PIN, and use that to reset the device.  This is what's currently
implemented.  There is a downside - with pin 16 tied to reset dev boards like
the D1 mini and Nodemcu v3 can't automatically reset the board to flash.
Either reset it manually to flash or disconnect pin 16 from reset to reflash.
Once you have an initial firmware on the board new flashes should be rare as
you can then use OTA updates.


## Included projects

OTB-IOT includes a bunch of other projects including:
- esp_mqtt https://github.com/tuanpmt/esp_mqtt
- esp-httpd https://github.com/bjpirt/esphttpd
- esp8266-frankenstein https://github.com/nekromant/esp8266-frankenstein

Originally, OTB-IOT was based on ESP Arduino, but this was a bit flakey, so has been rewritten to use the ESP Open SDK directly.  esp8266-frankenstein is included for the DS18B20 library.

Othe changes include:
- More compile time memory allocation in esp_mqtt
- Making the DS18B20 code from esp-frankenstein a bit more library friendly

All changes to the above libraries are made available under the GPLv3 with the existing works retaining their original licenses.


### Temperatures

Temperatures are reported in C (Celsius), to a precision of .1 of a degree.  This involves reading the raw temperature from the DallasTemperature library and then processing "manually", rather than handling as a float - because the ESP8266 SDK doesn't include float printf/sprintf support today.


### Debugging

make will generate disassembly and symbols files in bin automatically.  Copious logging at various levels via serial is included.  Major errors are logged via MQTT (if connected).


### Other Questions

Please ask me: https://github.com/piersfinlayson/otb-iot


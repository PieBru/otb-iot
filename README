#
# OTB-IOT - Out of The Box Internet Of Things
#
# Copyright (C) 2016 Piers Finlayson
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#

### Introduction

OTB-IOT is a firmware for IOT applications intended to run "Out of The Box".  This means that after flashing the firmware onto an IOT device the firwmare is immediately usefully usable by human being, without flash, serial or other engineering type access.


### Getting started

- From the root directory run ./build
- Then connect your device to a serial port in flash mode and run ./upload
- A serial monitor will automatically be started


### Customization

Fiddle with definitions in src/otb_def.h.  Particularly
- OTB_MQTT_SERVER (set to your own MQTT server, I've tested with mosquitto)
- OTB_MQTT_LOCATION_1, OTB_MQTT_LOCATION_2, OTB_MQTT_LOCATION3, and OTB_MQTT_LOCATION_4_OPT


### Project status

Very much a work in progress, with stability issues, limited function, and a cleaner build process (and better integration with used third party libraries) required. 

Wifi seems more solid now since I've rewritten this portion, binning Arduino library WiFiManager and using the ESP APIs directly.  However, on the Wemos it seems to be using the AP MAC address when connecting as a STA.  This seems a little odd and will require more digging.


### First time setup

For first time usage it can be configured via wifi using the built in web server and its own wifi access point, and will then store off its wifi credentials for future use - except I've regressed this area of function removing WiFiManager, so there's some code in otb_main that can be #if 1'd in to set SSID and password.  It should request new wifi credentials if unable to connect to this configured wifi, and then only for a pre-configured amount of time before it reboots to try and connect to the configured wifi.


### Supported IOT hardware

Right now OTB-IOT has been devloped to support ESP8266 based boards, and has been tested on ESP-01(1M), ESP-12(E) and Wemos D1-mini boards.  To build other than ESP-01(1M) requires tweaking the platform.ini and ./build scripts.  Other IOT platforms may be supported in future.


### Supported sensors

Today the supported sensor types are:
- DS18B20 temperature sensors (up to a eight devices, up to 2 tested)

Future supported sensors are likely to include:
- DHT22 temperature and humidity sensors
- Current transformer sensors
- NEO-6X GPS


### Other supported hardware

Future support may also include:
- Screens (to display status on a locally attached screen)
- Relays (to control AC equipment)
- Physical ethernet port (to act as wifi to ethernet bridge)


### Communication protocols

Supported communication protocols are:
- 802.11 b/g/n for physical network access
- IPv4 transport
- Serial for debug messages
- MQTT for
  - communication about attached sensor values
  - remote control (reconfiuration, reset, relay control)


### MQTT topic structure

(See src/otb_def.h for values of the defines in caps below.)

Supports multiple structures for reporting:
- /OTB_ROOT/LOCATION_1/LOCATION_2/LOCATION_3/CHIP_ID/TEMPERATURE
- /OTB_ROOT/LOCATION_1/LOCATION_2/LOCATION_3/CHIP_IP/LOCATION_4_OPT/TEMPERATURE
- Same paths but replace TEMPERATURE with SYSTEM_CMD:
  - BOOTED_STATUS (once OTB-IOT booted and includes version string and compile date and time)
- /LWT/OTB_ROOT/LOCATION_1/LOCATION_2/LOCATION_3/OTB_CHIPID/PUB_STATUS offline (MQTT last will and testament, if device becomes disconnected)

For controlling the same variants, but replace TEMPERATURE with SYSTEM_CMD.  Supported commands:
- RESET_CMD (resets device)
- REBOOT_CMD (reboots device)
- UPGRADE_CMD (upgrades device - not supported yet)

Also subscribes to /OTB_ROOT/ALL/SYSTE_CMD for control of multiple devices at once.


### Upgrades

OTB-IOT is expected to offer OTA updates, controlled by MQTT shortly.  This may require a minimum of 1MB flash to support OTB-IOT.


### Errors

All errors are logged to serial.

Logging via MQTT is a planned future feature.

OTB-IOT attempts to recover from serious errors by resetting.  However, ESP8266 softwar reset appears to be quite flakey on some devices (perhaps due to floating pins on many ESP boards).  I'm currently searching for a reliable solution, but may require specific hardware to be reliable.


### Included projects

OTB-IOT includes a bunch of other projects including:
- esp_mqtt https://github.com/tuanpmt/esp_mqtt
- TaskScheduler https://github.com/arkhipenko/TaskScheduler
- esp8266/Arduino https://github.com/esp8266/Arduino
- OneWire https://github.com/PaulStoffregen/OneWire.git
- Arduino-Temperture-Control-Library https://github.com/milesburton/Arduino-Temperature-Control-Library

As can be seen, OTB-IOT is a combination of Arduino based code and code written for the ESP8266 SDK.  Various modifications have been made to all of the included projects to get this work, with a key addition of faking out the ESP8266 SDK scheduler (used by esp_mqtt) and replacing it with Arduino TaskScheduler.

Other changes include:
- More compile time memory allocation in esp_mqtt
- Removing assert on yield in sketch context from esp8266/Arduino (as unexpected work is done in this context due to scheduling task out and TCP work from esp_mqtt).
- Removing Arduino WiFiManager.

All changes to the above libraries are made available under the GPLv3 with the existing works retaining their original licenses.


### Temperatures

Temperatures are reported in C (Celsius), to a precision of .1 of a degree.  This involves reading the raw temperature from the DallasTemperature library and then processing "manually", rather than handling as a float - because the ESP8266 SDK doesn't include float printf/sprintf support today.


### Debugging

./build automatially generated disassembly file (./dis) and symbols file (./sym).  However, this isn't created automatically if built using ./upload.  Generous logging is provided via serial.  Major errors will be logged via MQTT in future.


### Other Questions

Please ask me: https://github.com/PiersFinlayson/otb-iot

